import apiClient from './api';

/**
 * Detect objects in an image using the YOLOv8 model via the Flask API
 * 
 * @param {string} imageSource - Either a URL to an image or base64-encoded image data
 * @returns {Promise<Array>} - Array of detected objects with label, confidence, x, y, width, height
 */
export const detectObjects = async (imageSource) => {
  function generateFallbackDetections(imageSource) {
    console.log('Generating client-side fallback UI element detections');
    
    // For now, use hardcoded values for a typical desktop UI
    // In a production app, we might try to estimate dimensions from imageSource
    const width = 1920;
    const height = 1080;
    
    return [
      // Main window
      {
        Label: "window",
        Confidence: 0.85,
        X: Math.floor(width * 0.1),
        Y: Math.floor(height * 0.05),
        Width: Math.floor(width * 0.8),
        Height: Math.floor(height * 0.85)
      },
      // Taskbar
      {
        Label: "taskbar",
        Confidence: 0.9,
        X: 0,
        Y: Math.floor(height * 0.95),
        Width: width,
        Height: Math.floor(height * 0.05)
      },
      // A few generic icons
      {
        Label: "icon",
        Confidence: 0.7,
        X: Math.floor(width * 0.02),
        Y: Math.floor(height * 0.02),
        Width: Math.floor(width * 0.03),
        Height: Math.floor(height * 0.03)
      },
      {
        Label: "icon",
        Confidence: 0.7,
        X: Math.floor(width * 0.06),
        Y: Math.floor(height * 0.02),
        Width: Math.floor(width * 0.03),
        Height: Math.floor(height * 0.03)
      }
    ];
  }

  try {
    let payload = {};
    
    // Determine if imageSource is a URL or base64 data
    if (imageSource.startsWith('http') || imageSource.startsWith('/')) {
      // It's a URL
      payload = {
        image_url: imageSource
      };
    } else {
      // It's base64 data
      // Remove the data:image/png;base64, prefix if it exists
      const base64Data = imageSource.includes('base64,') 
        ? imageSource.split('base64,')[1] 
        : imageSource;
      
      payload = {
        screenshot: base64Data
      };
    }
    
    try {
      // Use our Node.js backend API instead of directly calling Flask
      // No need to add '/api/' prefix as it's already in the baseURL from apiClient configuration
      const response = await apiClient.post('/detection/detect', payload, {
        timeout: 30000, // 30 seconds timeout
        headers: {
          'Content-Type': 'application/json'
        }
      });
        // Ensure we have a valid array even if no detections
      if (response.data) {
        if (Array.isArray(response.data)) {
          // If response is directly an array of detections
          console.log('Detection response is a direct array');
          return response.data.length > 0 ? response.data : generateFallbackDetections(imageSource);
          
        } else if (Array.isArray(response.data.Detections)) {
          // Standard format with Detections array property
          if (response.data.Detections.length === 0) {
            console.warn('Empty detections array received, might need fallback generation');
            return generateFallbackDetections(imageSource);
          }
          
          return response.data.Detections;
          
        } else if (response.data.fallbackDetections) {
          // Server already provided fallbacks
          console.log('Using server-provided fallback detections');
          return response.data.fallbackDetections;
      } else if (response.data && response.data.Detections === undefined) {
        console.warn('No Detections property found in response, generating fallbacks');
        return generateFallbackDetections(imageSource);
      } else {
        console.warn('Detection response format unexpected:', response.data);
        // Try to use whatever is available or generate fallbacks
        return response.data.Detections || generateFallbackDetections(imageSource);
      }
    } catch (error) {
      // Handle specific error cases and provide more helpful messages
      if (error.code === 'ECONNREFUSED' || error.message.includes('Failed to fetch')) {
        console.error('Cannot connect to API server:', error);
        throw new Error('Cannot connect to the API server. Please make sure the server is running.');
      } else if (error.response) {
        // The server responded with a status code outside the 2xx range
        console.error('Detection API error:', error.response.data);
        throw new Error(`Server error: ${error.response.data.error || error.response.statusText}`);
      } else {
        console.error('Object detection failed:', error);
        throw error;
      }
    }
  } catch (error) {
    console.error('Object detection failed:', error);
    throw error;
  }
};
